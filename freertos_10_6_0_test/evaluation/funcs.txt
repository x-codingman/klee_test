BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  const BaseType_t xCopyPosition ) 
BaseType_t MPU_xQueueReceive( QueueHandle_t xQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) 
BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) 
BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) 
UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t xQueue ) 
UBaseType_t MPU_uxQueueSpacesAvailable( const QueueHandle_t xQueue ) 
TaskHandle_t MPU_xQueueGetMutexHolder( QueueHandle_t xSemaphore ) 
BaseType_t MPU_xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait ) 
BaseType_t MPU_xQueueGiveMutexRecursive( QueueHandle_t pxMutex ) 
void MPU_vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcName ) 
void MPU_vQueueUnregisterQueue( QueueHandle_t xQueue ) 
const char * MPU_pcQueueGetName( QueueHandle_t xQueue ) 
BaseType_t MPU_xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet ) 
QueueSetMemberHandle_t MPU_xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                const TickType_t xTicksToWait ) 
void MPU_vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber ) 
UBaseType_t MPU_uxQueueGetQueueNumber( QueueHandle_t xQueue ) 
uint8_t MPU_ucQueueGetQueueType( QueueHandle_t xQueue )
void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) 
void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID ) 
BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) 
TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) 
BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait ) 
const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) 
void MPU_vTimerSetReloadMode( TimerHandle_t xTimer,
                              const UBaseType_t uxAutoReload ) 
BaseType_t MPU_xTimerGetReloadMode( TimerHandle_t xTimer ) 
UBaseType_t MPU_uxTimerGetReloadMode( TimerHandle_t xTimer ) 
TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) 
TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) 

/* Privileged only wrappers for Timer APIs. These are needed so that
 * the application can use opaque handles maintained in mpu_wrappers.c
 * with all the APIs. */
TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction ) PRIVILEGED_FUNCTION;
TimerHandle_t MPU_xTimerCreateStatic( const char * const pcTimerName,
                                      const TickType_t xTimerPeriodInTicks,
                                      const UBaseType_t uxAutoReload,
                                      void * const pvTimerID,
                                      TimerCallbackFunction_t pxCallbackFunction,
                                      StaticTimer_t * pxTimerBuffer ) PRIVILEGED_FUNCTION;
BaseType_t MPU_xTimerGetStaticBuffer( TimerHandle_t xTimer,
                                      StaticTimer_t ** ppxTimerBuffer ) PRIVILEGED_FUNCTION;

/* MPU versions of event_group.h API functions. */
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) 
EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) 
EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) 
EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    UBaseType_t MPU_uxEventGroupGetNumber( void * xEventGroup ) 
    void MPU_vEventGroupSetNumber( void * xEventGroup,
                                   UBaseType_t uxEventGroupNumber ) 

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) 
size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) 
BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) 
BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) 
size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) 
size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) 
BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) 
size_t MPU_xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer ) 
